// Generated by CoffeeScript 1.6.1
(function() {
  var PORT, app, express, handleResponse, https, makeRequest;

  express = require('express');

  app = express();

  app.use(express.logger());

  app.use(express["static"](__dirname + '/public'));

  app.use(express.bodyParser());

  app.use(express.cookieParser());

  app.use(express.cookieSession({
    secret: process.env.SECRET || 'shhhhhhhhhhh!'
  }));

  app.post('/verify', function(req, res) {
    var assertion, requestBody, requestHeaders;
    assertion = req.body.assertion;
    requestBody = JSON.stringify({
      assertion: assertion,
      audience: process.env.AUDIENCE || 'http://127.0.0.1:' + PORT
    });
    requestHeaders = {
      host: 'verifier.login.persona.org',
      path: '/verify',
      method: 'POST',
      headers: {
        'Content-Length': requestBody.length,
        'Content-Type': 'application/json'
      }
    };
    return makeRequest(requestHeaders, requestBody, function(responseBody) {
      var response;
      response = JSON.parse(responseBody);
      if (response.status === 'okay') {
        req.session.email = response.email;
        return res.send('yes');
      } else {
        req.session = null;
        res.send('no');
        return console.log(response);
      }
    });
  });

  app.get('/whoami', function(req, res) {
    if ('email' in req.session) {
      return res.send(req.session.email);
    } else {
      return res.send('idk');
    }
  });

  app.post('/logout', function(req, res) {
    req.session = null;
    return res.send('done');
  });

  app.get('/private', function(req, res) {
    if ('email' in req.session) {
      return res.send("Hey there! You're logged in as " + req.session.email + ".");
    } else {
      return res.send("Whoa, you're not logged in. Nothing to see here, move along!");
    }
  });

  https = require('https');

  makeRequest = function(headers, body, callback) {
    var vreq;
    vreq = https.request(headers, handleResponse(callback));
    return vreq.write(body);
  };

  handleResponse = function(callback) {
    return function(vres) {
      var responseBody;
      responseBody = '';
      vres.on('data', function(chunk) {
        return responseBody += chunk;
      });
      return vres.on('end', function() {
        return callback(responseBody);
      });
    };
  };

  PORT = 8080;

  app.listen(process.env.PORT || PORT);

}).call(this);
